#!/usr/bin/env python3

import argparse
import sys
from parser import GarminProperties


class Once(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        if hasattr(self, 'seen'):
            raise argparse.ArgumentError(self, 'only one allowed')
        setattr(self, 'seen', True)
        setattr(namespace, self.dest, values)


def main() -> int:
    argp = argparse.ArgumentParser(
        prog="garmin-settings-parser.py",
        description=("Reads and writes Garmin settings files that contain configurable properties.\n"
                     "* When calling the program without arguments, it will show this help message.\n"
                     "* When calling the program with one positional argument that points to either"
                     " a GARMIN.SET binary file or a garmin settings JSON file as generated by the"
                     " simulator, it will show information about the file.\n"
                     "* When calling the program with the '--property-id' and '--property-value' parameters"
                     " it will modify the input file value of the property-id with the provided value,"
                     " and write the result to the output file. If no output file is provided, the"
                     " modified properties are printed in stdout (dry-run).\n\n"
                     "You can only modify one property at a time - if you want to modify multiple properties,"
                     " you need to call the program multiple times and use the output file of one call to the"
                     " input file of the next call."),
        formatter_class=lambda prog: argparse.RawDescriptionHelpFormatter(prog, width=80))

    argp.add_argument('--property-id', dest='property_id', type=str, action=Once,
                      help=("The property-id to modify its value with the value provided by the"
                            " '--property-value' parameter\n"))
    argp.add_argument('--property-value', dest='property_value', type=str, action=Once,
                      help=("The property-value to set for the property-id provided by the"
                            " '--property-id' parameter\n"))
    argp.add_argument('-o', '--output-file', metavar='OUTPUT_FILE', action=Once,
                      dest="output_file", type=argparse.FileType(mode='ab'),
                      help=("Path to an output GARMIN_OUT.SET file to write the modified file"))
    argp.add_argument('input_file', metavar='INPUT_FILE', nargs=1, type=argparse.FileType(mode='rb'),
                      help=("Path to a binary 'GARMIN.SET' file, or a 'Garmin-settings.json' file as"
                            " generated by the simulator"))

    # If no args provided, show help message
    if len(sys.argv) == 1:
        sys.argv.append('--help')
    args = argp.parse_args()

    input_stream = args.input_file[0]

    if input_stream.name == "<stdin>":
        raise argp.error("Sorry, but you cannot use stdin as stdin is not seekable :(")

    if args.output_file is not None and input_stream.name == args.output_file.name:
        raise argp.error("Input and output files must be different")

    properties = GarminProperties(input_stream)

    # If no params args provided, show info for the file that is provided as the only positional arg
    if len(sys.argv) == 2:
        print(f"{input_stream.name} contains {len(properties)}", "properties" if len(properties) > 1 else "property")

        for prop in properties:
            print(f"Property name: {prop.name}")
            print(f"         Type: {prop.type.name}")
            print(f"        Value: {prop.value}")

        return 0

    if bool(args.property_id) ^ bool(args.property_value):
        raise argp.error("--property-id and --property-value depend on each other - you must provide both or none")

    if args.property_id is not None:
        properties[args.property_id] = args.property_value

    if args.output_file:
        args.output_file.write(properties.bytes)
    else:
        if args.property_id is not None:
            print(f"Modified property {args.property_id} with value {args.property_value}")
        for prop in properties:
            print(f"{prop.name}: {prop.value}")

    return 0


if __name__ == "__main__":
    exit(main())
